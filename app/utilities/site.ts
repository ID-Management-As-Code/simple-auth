
import { getDbProvider, Settings } from "../data/index.ts";
import { hashPassword } from "./crypto.ts";
import { EnvKey, getEnvValue } from "./env.ts";

export let settings: Settings;

export async function setupSettings() {
    const db = getDbProvider();

    const defaultSettings = await db.settings.getDefault();

    if (!defaultSettings) {
        const currentDate = new Date();

        settings = {
            id: "",
            createdAt: currentDate.toISOString(),
            description: "Default settings generated by the app at startup",
            default: true,
            name: "Default",
            title: "SimpleAuth",
            underMaintenance: false,
            updatedAt: currentDate.toISOString()
        };

        await db.settings.add(settings);

        console.log(`Default settings have been created.`);
    }
}

export async function createDefaultAdministrator() {
    const db = getDbProvider();

    const adminUsername = getEnvValue<string>(EnvKey.ADMIN_USERNAME);

    if (!adminUsername) {
        throw new Error(
            `The ${EnvKey.ADMIN_USERNAME} environment variable is required.`
        );
    }

    const defaultAdmin = await db.users.getByUsername(adminUsername);

    if (!defaultAdmin) {
        const currentDate = new Date();
        const adminPassword = Deno.env.get(EnvKey.ADMIN_PASSWORD);

        if (!adminPassword) {
            throw new Error(
                `The ${EnvKey.ADMIN_PASSWORD} environment variable is required.`
            );
        }

        const hashedAdminPassword = await hashPassword(adminPassword);

        await db.users.add({
            id: "",
            createdAt: currentDate.toISOString(),
            passwordHash: hashedAdminPassword,
            username: adminUsername,
            updatedAt: currentDate.toISOString(),
        });

        console.log(`Default admin ${adminUsername} has been created.`);
    }
}
